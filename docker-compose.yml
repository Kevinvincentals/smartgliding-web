services:
  nextjs-app:
    image: ghcr.io/kevinvincentals/smartgliding-web:latest
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mongodb://mongodb:27017/smartgliding?replicaSet=rs0
      - JWT_SECRET=your-super-secret-key-change-this-in-production
      - PLANE_TRACKER_WS_URL=ws://smartgliding-ogn-backend:8765
      - WEBHOOK_API_KEY=secret
    depends_on:
      - mongodb
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  smartgliding-ogn-backend:
    image: ghcr.io/kevinvincentals/smartgliding-ogn-backend:latest
    container_name: smartgliding-ogn-backend
    ports:
      - "8765:8765"
    volumes:
      - ogn_data:/data
    environment:
      - DATABASE_URL=mongodb://mongodb:27017/fsk-dev?replicaSet=rs0
      - WEBHOOK_URL=http://nextjs-app:3000/api/webhooks/flights
      - WEBHOOK_API_KEY=secret
      - WEBHOOK_ENABLED=true
    depends_on:
      - mongodb
      - nextjs-app
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  mongodb:
    image: mongo:7
    command: ["--replSet", "rs0", "--bind_ip_all", "--noauth"]
    ports:
      - "27017:27017"
    volumes:
      - ./database:/data/db
    restart: unless-stopped
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('hello')"]
      interval: 5s
      timeout: 2s
      retries: 10

  mongodb-setup:
    image: mongo:7
    depends_on:
      mongodb:
        condition: service_healthy
    command: >
      mongosh --host mongodb:27017 --eval "
      try {
        rs.status();
        print('Replica set already initialized');
      } catch (err) {
        print('Initializing replica set...');
        rs.initiate({
          _id: 'rs0',
          members: [{ _id: 0, host: 'mongodb:27017' }]
        });
        print('Replica set initialized');
      }
      "
    restart: "no"

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_POLL_INTERVAL=3600  # Check every hour (3600 seconds)
      - WATCHTOWER_CLEANUP=true        # Remove old images after updating
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_LABEL_ENABLE=true   # Only monitor containers with watchtower labels
    command: --interval 3600 --cleanup

volumes:
  ogn_data:


